<?php

/**
 * @file
 * Hosting site backup manager module.
 *
 * Adds a backup tab to the site node.
 */

/**
 * Implements of hook_menu().
 *
 * @return
 *   An array of menu items.
 */
function hosting_site_backup_manager_menu() {
  $items = array();

  $items['node/%hosting_site_node/backups'] = array(
    'title' => 'Backups',
    'description' => 'List of backups of this website',
    'page callback' => 'hosting_site_backup_manager_page',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%hosting_site_node/backup/download/%'] = array(
    'title' => 'Download backup',
    'description' => 'Download the selected backup',
    'page callback' => 'hosting_site_backup_manager_download',
    'page arguments' => array(1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%hosting_site_node/backup/delete/%'] = array(
    'title' => 'Delete backup',
    'description' => 'Delete the selected backup',
    'page callback' => 'hosting_site_backup_manager_delete',
    'page arguments' => array(1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%hosting_site_node/backup/restore/%'] = array(
    'title' => 'Restore backup',
    'description' => 'Restore the selected backup',
    'page callback' => 'hosting_site_backup_manager_restore',
    'page arguments' => array(1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );


  return $items;
}

/**
 * Placeholder function for additional delete checks.
 *
 * @param node $site
 *   The site node object.
 * @param int $bid
 *   The backup id.
 *
 * @return
 *   A confirmation form or a error string.
 */
function hosting_site_backup_manager_delete($site, $bid) {
  // Get the filename.
  $source = db_fetch_object(db_query("SELECT filename FROM {hosting_site_backups} WHERE site=%d AND bid=%d ORDER BY timestamp DESC", $site->nid, $bid));

  if ($source) {
    // Return a confirmation form.
    $output = drupal_get_form('hosting_site_backup_manager_confirm_delete', $source->filename, $site->nid, $bid);
  }
  else {
    $output = t('A valid backup could not be found.');
  }
  return $output;
}

/**
 * Function that renders a confirmation form for the selected deletetion.
 *
 * @param $form_state
 *   The form state array. Changes made to this variable will have no effect.
 * @param $filename
 *   The backup filename to delete.
 * @param $sitenid
 *   The selected site node id.
 * @param $bid
 *   The backup id.
 *
 * @return
 *   A confirmation form.
 */
function hosting_site_backup_manager_confirm_delete($form_state, $filename, $sitenid, $bid) {

  // Add the hosting_task javascript, 
  // so we can use the confirm form functionality.
  drupal_add_js(drupal_get_path('module', 'hosting_task') . '/hosting_task.js');

  // Get the backup data.
  $source = db_fetch_object(db_query("SELECT * FROM {hosting_site_backups} WHERE site=%d AND bid=%d", $sitenid, $bid));


  // Build the form
  $form = array();
  $form['#filename'] = $filename;
  $form['#sitenid'] = $sitenid;
  $form['#bid'] = $bid;

  // Not the best formatted code, but suffices for now
  $form['explanation'] = array(
    '#type' => 'markup',
    '#value' => '<h2>' . t('Backup information') . '</h2>' . t('Backup description:<br /> %description', array('%description' => filter_xss($source->description))) . '<br />',
    '#weight' => -10,
  );

  $form['date'] = array(
    '#type' => 'markup',
    '#value' => t('Backup was created on:<br /> %date', array('%date' => format_date($source->timestamp, 'short'))) . '<br /><br />',
    '#weight' => -8,
  );


  // Build the confirmation form
  $form = confirm_form(
  $form,
  t('Are you sure you want to delete this backup?', array()),
      'node/' . $sitenid . '/backup',
  t('This action cannot be undone.'),
  t('Delete'),
  t('Cancel'),
      'hosting_site_backup_manager_confirm_delete');

  // Copied from hosting_task.module
  // Add an extra class to the actions to allow us to disable 
  // the cancel link via javascript for the modal dialog
  $form['actions']['#prefix'] = '<div id="hosting-task-confirm-form-actions" class="container-inline">';

  return $form;
}

/**
 * The form submit function.
 */
function hosting_site_backup_manager_confirm_delete_submit($form, &$form_state) {

  // The deletion has been confirmed, process the result
  $filename = $form['#filename'];
  $sitenid = $form['#sitenid'];
  $bid = $form['#bid'];

  //Add the hosting task.
  hosting_add_task($sitenid, 'backup_delete', array($bid => $filename));

  $form_state['redirect'] = 'node/' . $sitenid . '/backup';
  modalframe_close_dialog();
}

/**
 * Placeholder  function for additional restore checks.
 *
 * @param $site
 *   The site node object.
 * @param $bid
 *   The backup id.
 *
 * @return
 *   A confirmation form.
 */
function hosting_site_backup_manager_restore($site, $bid) {
  //@todo: Build in extra checks.
  $output = drupal_get_form('hosting_site_backup_manager_confirm_restore', $site->nid, $bid);

  return $output;
}

/**
 * Function that renders a confirmation form for the selected deletetion.
 *
 * @param $form_state
 *   The form state array. Changes made to this variable will have no effect.
 * @param $filename
 *   The backup filename to delete.
 * @param $sitenid
 *   The selected site node id.
 * @param $bid
 *   The backup id
 *
 * @return
 *   A confirmation form.
 */
function hosting_site_backup_manager_confirm_restore($form_state, $sitenid, $bid) {
  // Add the hosting_task javascript, so we can use the confirm form functionality
  drupal_add_js(drupal_get_path('module', 'hosting_task') . '/hosting_task.js');

  // Build the form
  $form = array();
  $form['#sitenid'] = $sitenid;
  $form['#bid'] = $bid;

  // Get the backup data
  $source = db_fetch_object(db_query("SELECT * FROM {hosting_site_backups} WHERE site=%d AND bid=%d", $sitenid, $bid));


  // Not the best formatted code, but suffices for now
  $form['explanation'] = array(
    '#type' => 'markup',
    '#value' => '<h2>' . t('Backup information') . '</h2>' . t('Backup description:<br /> %description', array('%description' => filter_xss($source->description))) . '<br />',
    '#weight' => -10,
  );

  $form['date'] = array(
    '#type' => 'markup',
    '#value' => t('Backup was created on:<br /> %date', array('%date' => format_date($source->timestamp, 'short'))) . '<br /><br />',
    '#weight' => -8,
  );


  // Build the confirmation form
  $form = confirm_form(
  $form,
  t('Are you sure you want to restore this backup?', array()),
        'node/' . $sitenid . '/backup',
  t('This action cannot be undone.'),
  t('Restore'),
  t('Cancel'),
        'hosting_site_backup_manager_confirm_restore');

  // Copied from hosting_task.module
  // add an extra class to the actions to allow us to disable the cancel link via javascript for the modal dialog
  $form['actions']['#prefix'] = '<div id="hosting-task-confirm-form-actions" class="container-inline">';
  return $form;
}

/**
 * The form submit function.
 */
function hosting_site_backup_manager_confirm_restore_submit($form, &$form_state) {
  // The restoration has been confirmed, process the result
  $sitenid = $form['#sitenid'];
  $bid = $form['#bid'];
  hosting_add_task($sitenid, 'restore', array('bid' => $bid));
  $form_state['redirect'] = 'node/' . $sitenid . '/backup';
  modalframe_close_dialog();

}

/**
 * Function to download a backup file.
 *
 * @param $site
 *   The site node object.
 * @param $bid
 *   The backup id.
 *
 * @return
 *   A file or a 404 page.
 */
function hosting_site_backup_manager_download($site, $bid) {
  //@todo: check if the bid is not in a task.
  $source = db_fetch_object(db_query("SELECT filename FROM {hosting_site_backups} WHERE site=%d AND bid=%d ORDER BY timestamp DESC", $site->nid, $bid));

  if ($source) {
    if ($fd = fopen($source->filename, 'rb')) {

      // Construct filename
      $filename = basename($source->filename);

      // Set headers
      header("Cache-Control: public");
      header("Content-Description: File Transfer");
      header("Content-Disposition: attachment; filename=$filename");
      header("Content-Type: application/octet-stream");
      header("Content-Transfer-Encoding: binary");

      while (!feof($fd)) {
        print fread($fd, 1024);
      }
      fclose($fd);
      exit();
    }
    else {
      drupal_not_found();
    }
  }
  else {
    drupal_not_found();
  }
}

/**
 * Show a list of backups for a website
 *
 * @param $site
 *   The site node.
 * @return
 *   A theme table wit a list of backups.
 */
function hosting_site_backup_manager_page($site) {
  $output = "";

  $headers[] = t('Backup');
  $headers[] = array('data' => t('Actions'), 'class' => 'hosting-actions');

  $rows = array();

  // Only allow actions when there's no backup delete or restore task running for this node
  $buttonstatus = !(hosting_task_outstanding($site->nid, 'backup_delete') || hosting_task_outstanding($site->nid, 'restore'));

  // TODO Make the table reload automatically
  $result = db_query("SELECT bid, description, filename, size, timestamp FROM {hosting_site_backups} WHERE site=%d ORDER BY timestamp DESC", $site->nid);
  while ($object = db_fetch_object($result)) {
    $row = array();
    $row['description'] = filter_xss($object->description) . "<br />" . format_size($object->size) . " - " . format_date($object->timestamp, 'short');

    $actions = array();
    // TODO Add check to see if the backup can be restored to the current platform?
    /* Add download button */
    $actions['download'] = _hosting_task_button(t('Get'), 'node/' . $site->nid . '/backup/download/' . $object->bid, t('Download the backup'), '', TRUE, FALSE, FALSE);
    /* Add delete button */
    $actions['delete'] = _hosting_task_button(t('Delete'), 'node/' . $site->nid . '/backup/delete/' . $object->bid, t('Delete the backup'), '', $buttonstatus, TRUE, FALSE);
    /* Add restore button */
    $actions['restore'] = _hosting_task_button(t('Restore'), 'node/' . $site->nid . '/backup/restore/' . $object->bid, t('Restore the backup'), '', $buttonstatus, TRUE, FALSE);

    $row['actions'] = array('data' => implode('', $actions), 'class' => 'hosting-actions');

    $rows[] = array('data' => $row, 'class' => $info['class']);
  }

  $output .= theme('table', $headers, $rows, array('class' => 'hosting-table'));
  return $output;
}
